rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // 관리자 이메일 (실제 관리자 이메일로 교체하세요)
    function isAdmin() {
      return request.auth != null && 
             (request.auth.token.email == '0521kimyi@gmail.com' ||  // 메인 관리자
              request.auth.token.email == 'acho1821@gmail.com' ||   // 서브 관리자
              request.auth.token.email == '20kyi@naver.com');       // 서브 관리자
    }

    // Users: 관리자는 모든 사용자 데이터 읽기/쓰기 가능, 일반 사용자는 자신의 데이터만
    match /users/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || isAdmin());
      allow write: if request.auth != null && (request.auth.uid == userId || isAdmin());

      // pointHistory는 반드시 users/{userId} 내부에 중첩
      match /pointHistory/{docId} {
        allow read, write: if request.auth != null && (request.auth.uid == userId || isAdmin());
      }
    }

    // Diaries: Users can only read/write their own diaries.
    match /diaries/{diaryId} {
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }

    // Novels: Users can only read/write their own novels.
    // The novelId is structured as {userId}_{year}_{month}_{weekNum}
    match /novels/{novelId} {
      allow read, write: if true;
    }

    // Friend Requests: Users can read/write their own friend requests
    match /friendRequests/{requestId} {
      allow read: if request.auth != null && 
        (resource.data.fromUserId == request.auth.uid || 
         resource.data.toUserId == request.auth.uid || 
         isAdmin());
      allow write: if request.auth != null && 
        (request.resource.data.fromUserId == request.auth.uid || 
         request.resource.data.toUserId == request.auth.uid || 
         isAdmin());
    }

    // Friendships: Users can read/write their own friendships
    match /friendships/{friendshipId} {
      allow read: if request.auth != null && 
        (request.auth.uid in resource.data.users || isAdmin());
      allow write: if true;
    }

    // Notifications: Users can read/write their own notifications
    match /notifications/{notificationId} {
      allow read: if request.auth != null && 
        (resource.data.userId == request.auth.uid || isAdmin());
      allow write: if request.auth != null && 
        (request.resource.data.userId == request.auth.uid || isAdmin());
    }
  }
} 